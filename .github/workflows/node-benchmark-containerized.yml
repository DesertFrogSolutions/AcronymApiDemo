name: Benchmark API implementations w/ Postgres Service Container

on:
  push:
    branches:
      - '*'
  schedule:
    - cron: '30 5 * * 2,4'

jobs:
  benchmark-restify:
    name: Benchmark for Restify
    strategy:
      matrix:
        nodeImage: ['node:14-alpine', 'node:16-alpine', 'node:17-alpine']
    runs-on: 'ubuntu-20.04'
    services:
      # label for service - since this job doesn't run in a container, this service is accessible at localhost
      database:
        image: postgres:14.2-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: acronymapi
          POSTGRES_PASSWORD: password
          POSTGRES_DB: defaultdb
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      backend:
        image: ${{ matrix.nodeImage }}
        ports:
          - 8080:8080
        options: >-
          --workdir /app
          --name backend
          --entrypoint /bin/bash
          --volume "${{ github.workspace }}:/app"
    steps:
      # https://github.com/actions/checkout
    - name: Checkout the commit triggering this job
      uses: actions/checkout@v2
    - name: Install Postgres Client
      run: |
        sudo apt-get update
        sudo apt-get install --yes --no-install-recommends postgresql-client
    - name: Initialize database with initdb
      run: |
        PGPASSWORD=password psql -h localhost -U acronymapi --dbname=defaultdb --file=initdb.sql

    - name: Restart backend
      uses: docker://docker
      with:
        args: >-
          docker exec backend sh -c "npm install && npm run start:restify" --detach

    - name: Run benchmarks with live Postgres server
      run: npm run benchmark
      env:
        PGUSER: acronymapi
        PGPASSWORD: password
        PGDATABASE: defaultdb
        PGHOST: localhost
        PGPORT: 5432
